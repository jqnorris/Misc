/*
 * TestFunctions.cpp
 *
 *  Created on: Nov 30, 2012
 *      Author: jqnorris
 */

#include <iostream>
#include <cmath>
#include "TestFunctions.h"

namespace testFunctions
{
int counter=0;
}

using std::cout;
using std::endl;
using std::abs;
using testFunctions::counter;

void setNatVol(Pore & pore, Options& options)
{
	pore.naturalVolume = counter;
	counter++;
}

void setE(Rock & rock, Options& options)
{
	rock.youngsModulus = counter;
	counter++;
}


int testMatrixForAll(Matrix & matrix, Options & options)
{
	counter=0;

	matrix.forAllRock(setE,options);

	int errorcount=0;
	int temp=0;

	cout << endl << "Testing Matrix For All Function" << endl << endl << "\t";

	for(int i=0; i< matrix.xDimension; i++)
	{
		for(int j=0; j< matrix.yDimension; j++)
		{
			cout << matrix.matrix[i][j].youngsModulus << "\t";
			if(temp!=matrix.matrix[i][j].youngsModulus)
			{
				errorcount++;
			}

			temp++;
		}

		cout << endl << "\t";
	}

	if(errorcount==0)
	{
		cout << endl << "Matrix For All Test Passed" << endl << endl;
		return 0;
	}
	else
	{
		cout << endl << "Matrix For All Test FALIED!!!!"  << endl << endl;
		return 1;
	};

	return 0;
}

int testPoreArrayForAll(PoreArray & pores, Options & options)
{
	counter=0;

	pores.forAllPores(setNatVol,options);

	int errorcount=0;
	int temp=0;

	cout << endl << "Testing PoreArray For All Function" << endl << endl << "\t";

	for(int i=0; i< pores.dimension; i++)
	{
		for(int j=0; j< pores.dimension; j++)
		{
			cout << pores.array[i][j].naturalVolume << "\t";
			if(temp!=pores.array[i][j].naturalVolume)
			{
				errorcount++;
			}

			temp++;
		}

		cout << endl << "\t";
	}

	if(errorcount==0)
	{
		cout << endl << "PoreArray For All Test Passed" << endl << endl;
		return 0;
	}
	else
	{
		cout << endl << "PoreArray For All Test FALIED!!!!"  << endl << endl;
		return 1;
	};

	return 0;
}

int testSetupMatrixNeighborsSquareLattice(PoreArray & pores, Matrix & matrix, Options & options)
{
	counter=0;

	int errorcount=0;

	pores.forAllPores(setNatVol,options);

	pores.leakoff.naturalVolume=1000;


	cout << endl << "Testing Setup Matrix Neighbors For Square Lattice" << endl << endl ;

	for(int i=0; i< matrix.xDimension; i++)
	{
		for(int j=0; j< matrix.yDimension; j++)
		{
			int a=matrix.matrix[i][j].pore1->naturalVolume;
			int b=matrix.matrix[i][j].pore2->naturalVolume;

			cout<< "\t" << "(" << i << "," << j << ")" << "\t" << a << "<->" << b<< endl;

			if(i%2==0)
			{
				if(!(abs(a-b)==options.N || abs(a-b)>500))
				{
					if(!(abs(a-b)==0 && a==1000))
						errorcount++;
				}
			}
			if(i%2==1)
			{
				if(!(abs(a-b)==1 || abs(a-b)>500))
				{
					errorcount++;
				}
			}
		}
	}

	if(errorcount==0)
	{
		cout << endl << "Setup Matrix Neighbors For Square Lattice Test Passed" << endl << endl;
		return 0;
	}
	else
	{
		cout << endl << "Setup Matrix Neighbors For Square Lattice Test FAILED!!!!"  << endl << endl;
		return 1;
	};

	return 0;
}

int testSetupMatrixNeighborsHexLattice(PoreArray & pores, Matrix & matrix, Options & options)
{
	counter=0;

	int errorcount=0;

	pores.forAllPores(setNatVol,options);

	pores.leakoff.naturalVolume=1000;


	cout << endl << "Testing Setup Matrix Neighbors For Hex Lattice" << endl << endl ;

	for(int i=0; i< matrix.xDimension; i++)
	{
		for(int j=0; j< matrix.yDimension; j++)
		{
			int a=matrix.matrix[i][j].pore1->naturalVolume;
			int b=matrix.matrix[i][j].pore2->naturalVolume;

			cout<< "\t" << "(" << i << "," << j << ")" << "\t" << a << "<->" << b<< endl;

			if(i%3==0)
			{
				if(!(abs(a-b)==(options.N +1) || abs(a-b)>500))
				{
					if(!(abs(a-b)==0 && a==1000))
					{
						errorcount++;
					}
				}
			}
			if(i%3==1)
			{
				if(!(abs(a-b)== options.N || abs(a-b)>500))
				{
					if(!(abs(a-b)==0 && a==1000))
					{
						errorcount++;
					}
				}
			}
			if(i%3==2)
			{
				if(!(abs(a-b)==1 || abs(a-b)>500))
				{
					errorcount++;
				}
			}
		}
	}

	if(errorcount==0)
	{
		cout << endl << "Setup Matrix Neighbors For Hex Lattice Test Passed" << endl << endl;
		return 0;
	}
	else
	{
		cout << endl << "Setup Matrix Neighbors For Hex Lattice Test FAILED!!!!"  << endl << endl;
		return 1;
	};

	return 0;
}

int testSetupPoreNeighborsSquareLattice(PoreArray & pores, Matrix & matrix, Options & options)
{
	counter=0;

	matrix.forAllRock(setE,options);

	int errorcount=0;

	cout << endl << "Testing Setup Pore Neighbors For Square Lattice" << endl << endl << "\t";

	for(int i=0; i< pores.dimension; i++)
	{
		for(int j=0; j< pores.dimension; j++)
		{
			cout << "\t(" << i << "," << j << ")\t";

			for(int k=0; k< options.latticeType; k++)
			{
				cout << pores.array[i][j].neighbors[k]->youngsModulus << " ";
			}

			if(0)
			{
				errorcount++;
			}

			cout << endl;
		}
	}

	return 0;

}



















