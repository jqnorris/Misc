/*
 * TestingSimulationFunctions.cpp
 *
 *  Created on: Dec 1, 2012
 *      Author: jqnorris
 */

#include <iostream>
#include "Framework.h"
#include "SimulationFunctions.h"

using std::cout;
using std::endl;

int testDamageMatrix(PoreArray & pores, Options & options)
{
	cout << endl << endl << "Testing Damage Matrix" << endl << endl;

	cout << "\t(1,1)\t";

	int errorcount=0;


	for (int i=0; i<options.latticeType; i++)
	{
		int sum=0;

		damageMatrix(pores.pores[1][1], options);

		for(int j=0; j<options.latticeType; j++)
		{
			cout << pores.pores[1][1].neighbors[j]->damage << " ";
			sum+=pores.pores[1][1].neighbors[j]->damage;
		}

		cout << endl << "\t     \t";

		if(sum!=(i+1))
		{
			errorcount++;
		}

	}

	if(errorcount==0)
	{
	cout << endl  <<"Damage Matrix Test PASSED" << endl;
	}
	else
	{
	cout << endl <<"Damage Matrix Test FAILED!!!!" << endl;
	};


	return 0;
}

int testFlow(Matrix & matrix, Options & options)
{
	matrix.matrix[1][1].damage=1;
	int errorcount=0;

	cout << endl << "Testing Flow" << endl;


	matrix.matrix[1][1].pore1->currentVolume=0;
	matrix.matrix[1][1].pore2->currentVolume=2;
	cout << endl << matrix.matrix[1][1].pore1->currentVolume << " & " << matrix.matrix[1][1].pore2->currentVolume;


	flow(matrix.matrix[1][1],options);

	cout << "\t->\t";
	cout << matrix.matrix[1][1].pore1->currentVolume << " & " << matrix.matrix[1][1].pore2->currentVolume << endl;

	if(matrix.matrix[1][1].pore1->currentVolume!=1 || matrix.matrix[1][1].pore2->currentVolume!=1)
	{
		errorcount++;
	}

	matrix.matrix[1][1].pore1->currentVolume=4;
	matrix.matrix[1][1].pore2->currentVolume=2;
	cout << endl << matrix.matrix[1][1].pore1->currentVolume << " & " << matrix.matrix[1][1].pore2->currentVolume;


	flow(matrix.matrix[1][1],options);

	cout << "\t->\t";
	cout << matrix.matrix[1][1].pore1->currentVolume << " & " << matrix.matrix[1][1].pore2->currentVolume << endl;

	if(matrix.matrix[1][1].pore1->currentVolume!=3 || matrix.matrix[1][1].pore2->currentVolume!=3)
	{
		errorcount++;
	}

	if(errorcount==0)
	{
		cout << endl << "Flow Test PASSED";
		return 0;
	}
	else
	{
		cout << endl << "Flow Test FAILED!!!!";
		return 1;
	};

	return 1;
}


